import numpy as np
from numpy import array

quads_data = {'Quad_1': {'coordinates': [[0.11370011238620566, 52.1985753079607, 4.266192772977321], [0.1136872797592018, 52.19857096841214, 4.266192772977321], [0.11369342226548204, 52.198564144506975, 3.76889409467354], [0.1137062548924859, 52.198568484055535, 3.76889409467354]], 'average_radiance': 100.03492816024534, 'centroid': array([ 0.11369677, 52.19856973,  4.01754343])}, 'Quad_2': {'coordinates': [[0.11368113725292155, 52.19857779231731, 4.763491451281101], [0.11366830462591769, 52.19857345276875, 4.763491451281101], [0.11367444713219793, 52.19856662886358, 4.266192772977321], [0.1136872797592018, 52.19857096841214, 4.266192772977321]], 'average_radiance': 100.03492334041897, 'centroid': array([ 0.11367779, 52.19857221,  4.51484211])}, 'Quad_3': {'coordinates': [[0.1136872797592018, 52.19857096841214, 4.266192772977321], [0.11367444713219793, 52.19856662886358, 4.266192772977321], [0.11368058963847819, 52.198559804958414, 3.76889409467354], [0.11369342226548204, 52.198564144506975, 3.76889409467354]], 'average_radiance': 100.03493251024268, 'centroid': array([ 0.11368393, 52.19856539,  4.01754343])}, 'Quad_4': {'coordinates': [[0.11366216211963745, 52.198580276673916, 5.260790129584881], [0.1136493294926336, 52.198575937125355, 5.260790129584881], [0.11365547199891383, 52.19856911322019, 4.763491451281101], [0.11366830462591769, 52.19857345276875, 4.763491451281101]], 'average_radiance': 100.03491852055636, 'centroid': array([ 0.11365882, 52.19857469,  5.01214079])}, 'Quad_5': {'coordinates': [[0.11366830462591769, 52.19857345276875, 4.763491451281101], [0.11365547199891383, 52.19856911322019, 4.763491451281101], [0.11366161450519408, 52.19856228931502, 4.266192772977321], [0.11367444713219793, 52.19856662886358, 4.266192772977321]], 'average_radiance': 100.03492769038351, 'centroid': array([ 0.11366496, 52.19856787,  4.51484211])}, 'Quad_6': {'coordinates': [[0.11367444713219793, 52.19856662886358, 4.266192772977321], [0.11366161450519408, 52.19856228931502, 4.266192772977321], [0.11366775701147433, 52.198555465409854, 3.76889409467354], [0.11368058963847819, 52.198559804958414, 3.76889409467354]], 'average_radiance': 100.03493686021037, 'centroid': array([ 0.1136711 , 52.19856105,  4.01754343])}, 'Quad_7': {'coordinates': [[0.11364318698635335, 52.19858276103052, 5.75808880788866], [0.1136303543593495, 52.19857842148197, 5.75808880788866], [0.11363649686562974, 52.1985715975768, 5.260790129584881], [0.1136493294926336, 52.198575937125355, 5.260790129584881]], 'average_radiance': 100.03491373671447, 'centroid': array([ 0.11363984, 52.19857718,  5.50943947])}, 'Quad_8': {'coordinates': [[0.1136493294926336, 52.198575937125355, 5.260790129584881], [0.11363649686562974, 52.1985715975768, 5.260790129584881], [0.11364263937190998, 52.19856477367163, 4.763491451281101], [0.11365547199891383, 52.19856911322019, 4.763491451281101]], 'average_radiance': 100.0349228885348, 'centroid': array([ 0.11364598, 52.19857036,  5.01214079])}, 'Quad_9': {'coordinates': [[0.11365547199891383, 52.19856911322019, 4.763491451281101], [0.11364263937190998, 52.19856477367163, 4.763491451281101], [0.11364878187819022, 52.19855794976646, 4.266192772977321], [0.11366161450519408, 52.19856228931502, 4.266192772977321]], 'average_radiance': 100.03493204035405, 'centroid': array([ 0.11365213, 52.19856353,  4.51484211])}, 'Quad_10': {'coordinates': [[0.11366161450519408, 52.19856228931502, 4.266192772977321], [0.11364878187819022, 52.19855794976646, 4.266192772977321], [0.11365492438447047, 52.19855112586129, 3.76889409467354], [0.11366775701147433, 52.198555465409854, 3.76889409467354]], 'average_radiance': 100.03494121018399, 'centroid': array([ 0.11365827, 52.19855671,  4.01754343])}, 'Quad_11': {'coordinates': [[0.11362421185306926, 52.198585245387136, 6.25538748619244], [0.1136113792260654, 52.198580905838575, 6.25538748619244], [0.11361752173234564, 52.19857408193341, 5.75808880788866], [0.1136303543593495, 52.19857842148197, 5.75808880788866]], 'average_radiance': 100.0349088808176, 'centroid': array([ 0.11362087, 52.19857966,  6.00673815])}, 'Quad_12': {'coordinates': [[0.1136303543593495, 52.19857842148197, 5.75808880788866], [0.11361752173234564, 52.19857408193341, 5.75808880788866], [0.11362366423862588, 52.19856725802824, 5.260790129584881], [0.11363649686562974, 52.1985715975768, 5.260790129584881]], 'average_radiance': 100.03491805065161, 'centroid': array([ 0.11362701, 52.19857284,  5.50943947])}, 'Quad_13': {'coordinates': [[0.11363649686562974, 52.1985715975768, 5.260790129584881], [0.11362366423862588, 52.19856725802824, 5.260790129584881], [0.11362980674490612, 52.198560434123074, 4.763491451281101], [0.11364263937190998, 52.19856477367163, 4.763491451281101]], 'average_radiance': 100.03492723849632, 'centroid': array([ 0.11363315, 52.19856602,  5.01214079])}, 'Quad_14': {'coordinates': [[0.11364263937190998, 52.19856477367163, 4.763491451281101], [0.11362980674490612, 52.198560434123074, 4.763491451281101], [0.11363594925118636, 52.19855361021791, 4.266192772977321], [0.11364878187819022, 52.19855794976646, 4.266192772977321]], 'average_radiance': 100.03493642634, 'centroid': array([ 0.11363929, 52.19855919,  4.51484211])}, 'Quad_15': {'coordinates': [[0.11364878187819022, 52.19855794976646, 4.266192772977321], [0.11363594925118636, 52.19855361021791, 4.266192772977321], [0.11364209175746662, 52.19854678631274, 3.76889409467354], [0.11365492438447047, 52.19855112586129, 3.76889409467354]], 'average_radiance': 100.03494559617303, 'centroid': array([ 0.11364544, 52.19855237,  4.01754343])}, 'Quad_16': {'coordinates': [[0.1136113792260654, 52.198580905838575, 6.25538748619244], [0.11359854659906155, 52.198576566290015, 6.25538748619244], [0.11360468910534179, 52.19856974238485, 5.75808880788866], [0.11361752173234564, 52.19857408193341, 5.75808880788866]], 'average_radiance': 100.03491323076699, 'centroid': array([ 0.11360803, 52.19857532,  6.00673815])}, 'Quad_17': {'coordinates': [[0.11361752173234564, 52.19857408193341, 5.75808880788866], [0.11360468910534179, 52.19856974238485, 5.75808880788866], [0.11361083161162203, 52.19856291847968, 5.260790129584881], [0.11362366423862588, 52.19856725802824, 5.260790129584881]], 'average_radiance': 100.0349224006041, 'centroid': array([ 0.11361418, 52.1985685 ,  5.50943947])}, 'Quad_18': {'coordinates': [[0.11362366423862588, 52.19856725802824, 5.260790129584881], [0.11361083161162203, 52.19856291847968, 5.260790129584881], [0.11361697411790227, 52.19855609457451, 4.763491451281101], [0.11362980674490612, 52.198560434123074, 4.763491451281101]], 'average_radiance': 100.03493157044093, 'centroid': array([ 0.11362032, 52.19856168,  5.01214079])}, 'Quad_19': {'coordinates': [[0.11362980674490612, 52.198560434123074, 4.763491451281101], [0.11361697411790227, 52.19855609457451, 4.763491451281101], [0.11362311662418251, 52.198549270669346, 4.266192772977321], [0.11363594925118636, 52.19855361021791, 4.266192772977321]], 'average_radiance': 100.03494074027739, 'centroid': array([ 0.11362646, 52.19855485,  4.51484211])}, 'Quad_20': {'coordinates': [[0.11363594925118636, 52.19855361021791, 4.266192772977321], [0.11362311662418251, 52.198549270669346, 4.266192772977321], [0.11362925913046276, 52.19854244676418, 3.76889409467354], [0.11364209175746662, 52.19854678631274, 3.76889409467354]], 'average_radiance': 100.03494991011357, 'centroid': array([ 0.1136326 , 52.19854803,  4.01754343])}, 'Quad_21': {'coordinates': [[0.11360468910534179, 52.19856974238485, 5.75808880788866], [0.11359185647833793, 52.19856540283629, 5.75808880788866], [0.11359799898461817, 52.19855857893112, 5.260790129584881], [0.11361083161162203, 52.19856291847968, 5.260790129584881]], 'average_radiance': 100.03492675055071, 'centroid': array([ 0.11360134, 52.19856416,  5.50943947])}, 'Quad_22': {'coordinates': [[0.11361083161162203, 52.19856291847968, 5.260790129584881], [0.11359799898461817, 52.19855857893112, 5.260790129584881], [0.11360414149089841, 52.19855175502595, 4.763491451281101], [0.11361697411790227, 52.19855609457451, 4.763491451281101]], 'average_radiance': 100.03493592039064, 'centroid': array([ 0.11360749, 52.19855734,  5.01214079])}, 'Quad_23': {'coordinates': [[0.11361697411790227, 52.19855609457451, 4.763491451281101], [0.11360414149089841, 52.19855175502595, 4.763491451281101], [0.11361028399717865, 52.198544931120786, 4.266192772977321], [0.11362311662418251, 52.198549270669346, 4.266192772977321]], 'average_radiance': 100.03494509023025, 'centroid': array([ 0.11361363, 52.19855051,  4.51484211])}, 'Quad_24': {'coordinates': [[0.11362311662418251, 52.198549270669346, 4.266192772977321], [0.11361028399717865, 52.198544931120786, 4.266192772977321], [0.1136164265034589, 52.19853810721562, 3.76889409467354], [0.11362925913046276, 52.19854244676418, 3.76889409467354]], 'average_radiance': 100.03495426006953, 'centroid': array([ 0.11361977, 52.19854369,  4.01754343])}, 'Quad_25': {'coordinates': [[0.11359799898461817, 52.19855857893112, 5.260790129584881], [0.11358516635761431, 52.19855423938256, 5.260790129584881], [0.11359130886389456, 52.19854741547739, 4.763491451281101], [0.11360414149089841, 52.19855175502595, 4.763491451281101]], 'average_radiance': 100.03494027033446, 'centroid': array([ 0.11359465, 52.198553  ,  5.01214079])}, 'Quad_26': {'coordinates': [[0.11360414149089841, 52.19855175502595, 4.763491451281101], [0.11359130886389456, 52.19854741547739, 4.763491451281101], [0.1135974513701748, 52.198540591572225, 4.266192772977321], [0.11361028399717865, 52.198544931120786, 4.266192772977321]], 'average_radiance': 100.03494944017717, 'centroid': array([ 0.1136008 , 52.19854617,  4.51484211])}, 'Quad_27': {'coordinates': [[0.11361028399717865, 52.198544931120786, 4.266192772977321], [0.1135974513701748, 52.198540591572225, 4.266192772977321], [0.11360359387645505, 52.19853376766706, 3.76889409467354], [0.1136164265034589, 52.19853810721562, 3.76889409467354]], 'average_radiance': 100.0349586100196, 'centroid': array([ 0.11360694, 52.19853935,  4.01754343])}, 'Quad_28': {'coordinates': [[0.11359130886389456, 52.19854741547739, 4.763491451281101], [0.1135784762368907, 52.19854307592883, 4.763491451281101], [0.11358461874317094, 52.198536252023665, 4.266192772977321], [0.1135974513701748, 52.198540591572225, 4.266192772977321]], 'average_radiance': 100.03495379011821, 'centroid': array([ 0.11358796, 52.19854183,  4.51484211])}, 'Quad_29': {'coordinates': [[0.1135974513701748, 52.198540591572225, 4.266192772977321], [0.11358461874317094, 52.198536252023665, 4.266192772977321], [0.11359076124945118, 52.1985294281185, 3.76889409467354], [0.11360359387645505, 52.19853376766706, 3.76889409467354]], 'average_radiance': 100.03496295997562, 'centroid': array([ 0.11359411, 52.19853501,  4.01754343])}, 'Quad_30': {'coordinates': [[0.11358461874317094, 52.198536252023665, 4.266192772977321], [0.11357178611616708, 52.198531912475104, 4.266192772977321], [0.11357792862244732, 52.19852508856994, 3.76889409467354], [0.11359076124945118, 52.1985294281185, 3.76889409467354]], 'average_radiance': 100.03496730990197, 'centroid': array([ 0.11358127, 52.19853067,  4.01754343])}}
import numpy as np
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Polygon
import matplotlib.colors as mcolors
from itertools import combinations

# Extract the quads data
#quads_data = {...}  # As provided in the original code

# Create a figure for the 2D projection
fig, ax = plt.subplots(figsize=(10, 8))

# Track quad positions and max row count
rows = {}
max_row_count = 0

# Group quads into rows based on elevation
for quad_name, quad_info in quads_data.items():
    avg_z = quad_info['centroid'][2]
    row_key = round(avg_z * 2) / 2  # Group by elevation
    if row_key not in rows:
        rows[row_key] = []
    rows[row_key].append(quad_name)

# Determine max_row_count
max_row_count = max(len(quads) for quads in rows.values())

# Process each row to ensure symmetry and max_row_count
for row_key in list(rows.keys()):
    current_quads = rows[row_key]
    if len(current_quads) == 0:
        continue
    # Sort current quads by centroid x-coordinate
    current_quads_sorted = sorted(current_quads, key=lambda q: quads_data[q]['centroid'][0])
    centroids = [quads_data[q]['centroid'] for q in current_quads_sorted]
    x_coords = [c[0] for c in centroids]
    min_x, max_x = min(x_coords), max(x_coords)
    center_x = (min_x + max_x) / 2

    # Generate mirrored quads to fill the row
    mirrored_quads = []
    for q in current_quads_sorted:
        q_centroid = quads_data[q]['centroid']
        mirrored_x = 2 * center_x - q_centroid[0]
        mirrored_centroid = np.array([mirrored_x, q_centroid[1], q_centroid[2]])
        # Check if mirrored quad already exists to avoid duplicates
        exists = False
        for q_name in rows[row_key]:
            if np.allclose(quads_data[q_name]['centroid'], mirrored_centroid):
                exists = True
                break
        if not exists:
            mirrored_q = {
                'coordinates': [[2 * center_x - coord[0], coord[1], coord[2]] for coord in
                                quads_data[q]['coordinates']],
                'average_radiance': quads_data[q]['average_radiance'],
                'centroid': mirrored_centroid
            }
            mirrored_name = f"{q}_mirror"
            quads_data[mirrored_name] = mirrored_q
            mirrored_quads.append(mirrored_name)

    # Combine and sort
    combined = current_quads_sorted + mirrored_quads
    combined_sorted = sorted(combined, key=lambda q: quads_data[q]['centroid'][0])
    # Deduplicate
    seen = set()
    combined_dedup = []
    for q in combined_sorted:
        if q not in seen:
            seen.add(q)
            combined_dedup.append(q)
    # Trim or repeat to max_row_count
    while len(combined_dedup) < max_row_count:
        combined_dedup += combined_dedup
    combined_dedup = combined_dedup[:max_row_count]
    rows[row_key] = combined_dedup

# Create the radiance matrix
sorted_rows = sorted(rows.keys(), reverse=True)
matrix = []
for row_key in sorted_rows:
    row = [quads_data[q]['average_radiance'] for q in rows[row_key]]
    matrix.append(row)
radiance_matrix = np.array(matrix)


# Function to find optimal panel placement
def find_optimal_panels(matrix, length, width, num_panels):
    rows, cols = matrix.shape
    panels = []
    for i in range(rows - length + 1):
        for j in range(cols - width + 1):
            total = np.sum(matrix[i:i + length, j:j + width])
            panels.append((-total, i, j))  # Negative for min-heap effect

    # Generate all possible combinations of non-overlapping panels
    panels.sort()
    best = 0
    best_combo = []
    for combo in combinations(panels[:100], num_panels):  # Limit to top 100 for efficiency
        total = sum([-c[0] for c in combo])
        coords = [(c[1], c[2]) for c in combo]
        overlap = False
        for i in range(len(coords)):
            x1, y1 = coords[i]
            for j in range(i + 1, len(coords)):
                x2, y2 = coords[j]
                if (x1 < x2 + length and x1 + length > x2 and
                        y1 < y2 + width and y1 + width > y2):
                    overlap = True
                    break
            if overlap:
                break
        if not overlap and total > best:
            best = total
            best_combo = coords
    return best, best_combo


# Example usage
panel_length = 2 # Vertical squads
panel_width = 2  # Horizontal squads
num_panels = 1
total_radiance, positions = find_optimal_panels(radiance_matrix, panel_length, panel_width, num_panels)
print(f"Optimal panel positions: {positions}")
print(f"Total radiance: {total_radiance}")
